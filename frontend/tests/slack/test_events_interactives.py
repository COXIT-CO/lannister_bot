import pytest
from django.urls import reverse
from slack_sdk.errors import SlackApiError

from tests.slack.payload_helpers import (
    add_reviewer_payload,
    approve_button_payload,
    confirm_button_payload,
    edit_request_modal_payload,
    edit_request_payload_dropdown,
    history_payload,
    modal_payload_on_new_request,
    reject_button_payload,
    remove_reviewer_payload,
)

pytestmark = [pytest.mark.django_db]


def test_help_message_event(frontend_api_client, mocker):
    url = reverse("slack-events")
    mocker.patch("requests.get")
    response = frontend_api_client.post(
        url,
        {
            "event": {"type": "message", "text": "help", "channel": "D03MK2ADT29"},
        },
        format="json",
    )
    print(response, response.data)
    assert response.status_code == 200


def test_confirm_button(frontend_api_client, mocker, admin_user_mock):
    url = reverse("interactives")
    mock = mocker.patch("requests.patch")
    mock.return_value.status_code = 200
    response = frontend_api_client.post(
        url,
        confirm_button_payload(admin_user_mock),
        format="json",
    )
    print(response.status_code)
    assert response.status_code == 200


def test_modal_on_new_request(
    frontend_api_client, admin_user_mock, worker_user_mock, mocker
):
    url = reverse("interactives")
    new_bonus_request = mocker.patch("requests.post")
    new_bonus_request.return_value.status_code == 200

    find_reviewer = mocker.patch("requests.get")
    find_reviewer.return_value.json.return_value = admin_user_mock
    response = frontend_api_client.post(
        url,
        modal_payload_on_new_request(worker_user_mock, admin_user_mock),
        format="json",
    )

    assert response.status_code == 200


def test_edit_request_dropdown(
    frontend_api_client, admin_user_mock, worker_user_mock, mocker, bonus_request_mock
):
    with pytest.raises(SlackApiError):
        # trigger_id is always unique-generated by Slack, returns SlackApiError
        url = reverse("interactives")
        mocker.patch("requests.get")
        response = frontend_api_client.post(
            url,
            edit_request_payload_dropdown(
                worker_user_mock, admin_user_mock, bonus_request_mock
            ),
        )
        assert response.status_code == 200


def test_edit_request_modal(
    frontend_api_client, worker_user_mock, bonus_request_mock, mocker
):
    url = reverse("interactives")
    mocker.patch("requests.get")
    response = frontend_api_client.post(
        url,
        edit_request_modal_payload(worker_user_mock, bonus_request_mock),
    )
    assert response.status_code == 200


def test_add_reviewer_command_assign_worker_as_reviewer(
    frontend_api_client, admin_user_mock, worker_user_mock, bonus_request_mock, mocker
):
    url = reverse("interactives")
    mocker.patch("requests.patch")
    response = frontend_api_client.post(
        url, add_reviewer_payload(worker_user_mock, admin_user_mock, bonus_request_mock)
    )
    assert response.status_code == 200


def test_remove_reviewer(
    frontend_api_client, admin_user_mock, worker_user_mock, mocker
):
    url = reverse("interactives")
    mocker.patch("requests.patch")
    response = frontend_api_client.post(
        url, remove_reviewer_payload(admin_user_mock, worker_user_mock)
    )
    assert response.status_code == 200


def test_history_multiple_choices(
    frontend_api_client, admin_user_mock, bonus_request_mock, mocker
):
    url = reverse("interactives")
    mocker.patch("requests.get")
    response = frontend_api_client.post(
        url, history_payload(admin_user_mock, bonus_request_mock)
    )
    assert response.status_code == 200


def test_approve_button(
    frontend_api_client, admin_user_mock, bonus_request_mock, mocker
):
    url = reverse("interactives")
    approve_btn_response = mocker.patch("requests.patch")
    approve_btn_response.return_value.status_code = 200
    response = frontend_api_client.post(
        url, approve_button_payload(admin_user_mock, bonus_request_mock)
    )
    assert response.status_code == 200


def test_reject_button(
    frontend_api_client, admin_user_mock, bonus_request_mock, mocker
):
    url = reverse("interactives")
    reject_btn_response = mocker.patch("requests.patch")
    reject_btn_response.return_value.status_code = 200
    response = frontend_api_client.post(
        url, reject_button_payload(admin_user_mock, bonus_request_mock)
    )
    assert response.status_code == 200
